## Q: What is the importance of `config.js` file?

A: `config.js` files are essentially editable text files that contain information required for the successful operation of a program. 
    The files are structured in a particular way, formatted to be user configurable.
    Most of the computer programs we use: whether office suites, web browsers, even video games are configured via menu interfaces.
    Configuration files are very simple in structure. 
    For instance, if you were to write an application, and the only thing it ever needed to know was its user's preferred name,
     then its one and only config file could contain exactly one word: the name of the user. 
    For example:
    Usually, though, an application needs to keep track of more than just one piece of information, so configuration often uses a key and a value:

    NAME='Vaibhav'
    SURNAME='Yadav'

## Q: What are `React Hooks`?

A: In React version 16.8, React introduced a new pattern called Hooks. 
    React Hooks are simple JavaScript functions that we can use to isolate the reusable part from a functional component.
    Hooks can be stateful and can manage side-effects.
    Hooks allow you to reuse stateful logic without changing your component hierarchy. 
    This makes it easy to share Hooks among many components or with the community.

    ### React provides a bunch of standard in-built hooks:

    - useState: To manage states. Returns a stateful value and an updater function to update it.
    - useEffect: To manage side-effects like API calls, subscriptions, timers, mutations, and more.
    - useContext: To return the current value for a context.
    - useReducer: A useState alternative to help with complex state management.
    - useCallback: It returns a memorized version of a callback to help a child component not re-render unnecessarily.
    - useMemo: It returns a memoized value that helps in performance optimizations.
    - useRef: It returns a ref object with a current property. The ref object is mutable. It is mainly used to access a child component imperatively.

## Q: Why do we need `useState Hook`?

A: `useState hook` is used to maintain the state in our React application. 
    It keeps track of the state changes so basically useState has the ability to encapsulate local state in a functional component.
    The useState hook is a special function that takes the `initial state` as an `argument` and `returns an array` of two entries. 
    UseState encapsulate only singular value from the state, for multiple state need to have useState calls.
    Syntax for useState hook

    ```
    const [state, setState] = useState(initialstate);

    #### Importing: To use useState you need to import useState from react as shown below:

    import React, { useState } from "react";

    we can use Hooks in Functional Components

    const Example = (props) => {
    // You can use Hooks here!
    return <div />;
    }

    
